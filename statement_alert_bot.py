import asyncio
import sqlite3
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime, timedelta

API_TOKEN = '8001292292:AAErSSPAftQ0hBkdAzhOpXzVrPnDta10N9Y'
ALERT_CHAT_ID = -4654354066  # id —á–∞—Ç–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
SOURCE_CHAT_ID = -1001234567890  # id —á–∞—Ç–∞, –≥–¥–µ –±–æ—Ç –∏—â–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)

def get_upcoming_requisites():
    """–í—Å–µ –≤—ã–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∏ (date_time > —Å–µ–π—á–∞—Å)"""
    conn = sqlite3.connect("requisites.db")
    c = conn.cursor()
    c.execute("SELECT req, date_time, trader FROM requisites")
    data = c.fetchall()
    conn.close()
    now = datetime.now()
    upcoming = []
    for req, date_time_str, trader in data:
        try:
            dt = datetime.strptime(date_time_str, "%d.%m.%Y %H:%M")
            if dt > now:
                upcoming.append((req, date_time_str, trader))
        except Exception:
            continue
    return sorted(upcoming, key=lambda x: datetime.strptime(x[1], "%d.%m.%Y %H:%M"))

def get_due_requisites():
    """–í—Å–µ –≤—ã–ø–∏—Å–∫–∏, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ (date_time <= —Å–µ–π—á–∞—Å)"""
    conn = sqlite3.connect("requisites.db")
    c = conn.cursor()
    c.execute("SELECT req, date_time, trader FROM requisites")
    data = c.fetchall()
    conn.close()
    now = datetime.now()
    due = []
    for req, date_time_str, trader in data:
        try:
            dt = datetime.strptime(date_time_str, "%d.%m.%Y %H:%M")
            if dt <= now:
                due.append((req, date_time_str, trader))
        except Exception:
            continue
    return due

def req_in_main_table(req):
    conn = sqlite3.connect("requisites.db")
    c = conn.cursor()
    c.execute("SELECT 1 FROM requisites WHERE req=?", (req,))
    found = c.fetchone() is not None
    conn.close()
    return found

def add_seen_req(req):
    conn = sqlite3.connect("requisites.db")
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS seen_reqs (req TEXT PRIMARY KEY)")
    c.execute("INSERT OR IGNORE INTO seen_reqs (req) VALUES (?)", (req,))
    conn.commit()
    conn.close()

async def report_loop(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –æ–∂–∏–¥–∞–µ–º—ã–º –≤—ã–ø–∏—Å–∫–∞–º –≤ 12:00 –∏ 20:00"""
    while True:
        now = datetime.now()
        # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ 12:00 –∏–ª–∏ 20:00
        next_times = [
            now.replace(hour=12, minute=0, second=0, microsecond=0),
            now.replace(hour=20, minute=0, second=0, microsecond=0)
        ]
        next_times = [t if t > now else t + timedelta(days=1) for t in next_times]
        next_report = min(next_times)
        wait_seconds = (next_report - now).total_seconds()
        print(f"[REPORT] –ñ–¥—É {wait_seconds/60:.1f} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ ({next_report.strftime('%H:%M')})")
        await asyncio.sleep(wait_seconds)

        upcoming = get_upcoming_requisites()
        if upcoming:
            text = "üóì –û–∂–∏–¥–∞–µ–º—ã–µ –≤—ã–ø–∏—Å–∫–∏:\n"
            for req, date_time_str, trader in upcoming:
                text += f"{req} ‚Äî {date_time_str} ‚Äî {trader}\n"
        else:
            text = "–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –≤—ã–ø–∏—Å–æ–∫."
        await bot.send_message(ALERT_CHAT_ID, text)

async def alert_loop(bot):
    """–ê–ª–µ—Ä—Ç–∏—Ç –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–∏—Å–∫–∏ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)"""
    already_alerted = set()
    while True:
        due = get_due_requisites()
        for req, date_time_str, trader in due:
            key = f"{req}|{date_time_str}|{trader}"
            if key not in already_alerted:
                text = f"‚ö†Ô∏è –í—Ä–µ–º—è –≤—ã–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ!\n{req} ‚Äî {date_time_str} ‚Äî {trader}"
                await bot.send_message(ALERT_CHAT_ID, text)
                already_alerted.add(key)
        await asyncio.sleep(60)

async def handle_group_message(message: types.Message, bot: Bot):
    # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ SOURCE_CHAT_ID
    if message.chat.id != SOURCE_CHAT_ID:
        return
    if not message.text:
        return
    # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç (10+ —Ü–∏—Ñ—Ä)
    lines = [line.strip() for line in message.text.splitlines()]
    for line in lines:
        match = re.fullmatch(r"\d{10,}", line)
        if match:
            req = match.group(0)
            if not req_in_main_table(req):
                # –ù–æ–≤—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç ‚Äî –∞–ª–µ—Ä—Ç–∏–º –∏ –∑–∞–Ω–æ—Å–∏–º –≤ seen_reqs
                await bot.send_message(ALERT_CHAT_ID, f"‚ö†Ô∏è –ó–∞–º–µ—á–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç: {req}")
                add_seen_req(req)
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—É
            break

async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()
    dp.message.register(lambda m: handle_group_message(m, bot))
    await bot.send_message(ALERT_CHAT_ID, "‚úÖ –ê–ª–µ—Ä—Ç-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç 12:00/20:00 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –≤—ã–ø–∏—Å–∫–∞–º.")
    await asyncio.gather(
        report_loop(bot),
        alert_loop(bot),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    asyncio.run(main())